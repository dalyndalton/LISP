Reading mergesort.lsp
Create function->definition binding: append = [['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['cons', ['first', 'list0'], ['append', ['rest', 'list0'], 'list1']]]]
Create function->definition binding: flatten = [['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]]]
Create function->definition binding: length = [['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]]]
Create function->definition binding: slice = [['list', 'idx'], ['if', ['atom', 'list'], 'list', ['if', ['eq', 0, 'idx'], ['first', 'list'], ['cons', ['first', 'list'], ['cons', ['slice', ['rest', 'list'], ['-', 'idx', 1]], 'nil']]]]]
Create function->definition binding: get = [['list', 'idx'], ['if', ['eq', 'list', 'nil'], 'nil', ['if', ['eq', 0, 'idx'], 'list', ['get', ['rest', 'list'], ['-', 'idx', 1]]]]]
Create function->definition binding: mselect = [['list', 'start', 'end'], ['flatten', ['cons', ['slice', ['get', 'list', 'start'], ['-', 'end', ['+', 'start', 1]]], 'nil']]]
Create function->definition binding: sort = [['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['if', ['eq', 'list1', 'nil'], 'list0', ['if', ['<', ['first', 'list0'], ['first', 'list1']], ['cons', ['first', 'list0'], ['sort', ['rest', 'list0'], 'list1']], ['cons', ['first', 'list1'], ['sort', ['rest', 'list1'], 'list0']]]]]]
Create function->definition binding: mergeSort = [['list'], ['if', ['eq', ['length', 'list'], 1], 'list', ['sort', ['mergeSort', ['mselect', 'list', 0, ['/', ['length', 'list'], 2]]], ['mergeSort', ['mselect', 'list', ['/', ['length', 'list'], 2], ['length', 'list']]]]]]
Eval (mergeSort (quote (1 )))
|  Calling function mergeSort
|  Found Value of mergeSort_defun as (['list'], ['if', ['eq', ['length', 'list'], 1], 'list', ['sort', ['mergeSort', ['mselect', 'list', 0, ['/', ['length', 'list'], 2]]], ['mergeSort', ['mselect', 'list', ['/', ['length', 'list'], 2], ['length', 'list']]]]])
|  |  Eval (quote (1 ))
|  |  Ans  (1 ) 
|  Create parameter->value binding: list = [1]
|  |  Eval (if (eq (length list )1 )list (sort (mergeSort (mselect list 0 (/ (length list )2 )))(mergeSort (mselect list (/ (length list )2 )(length list )))))
|  |  |  Eval (eq (length list )1 )
|  |  |  |  Eval (length list )
|  |  |  |  |  Calling function length
|  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  Eval list 
|  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  Create parameter->value binding: list = [1]
|  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  Ans  1  
|  |  |  |  Ans  1  
|  |  |  |  Eval 1 
|  |  |  |  Ans  1  
|  |  |  Ans  True  
|  |  |  Eval list 
|  |  |  Found Value of list as [1]
|  |  |  Ans  (1 ) 
|  |  Ans  (1 ) 
Ans  (1 ) 
Eval (mergeSort (quote (4 3 1 )))
|  Calling function mergeSort
|  Found Value of mergeSort_defun as (['list'], ['if', ['eq', ['length', 'list'], 1], 'list', ['sort', ['mergeSort', ['mselect', 'list', 0, ['/', ['length', 'list'], 2]]], ['mergeSort', ['mselect', 'list', ['/', ['length', 'list'], 2], ['length', 'list']]]]])
|  |  Eval (quote (4 3 1 ))
|  |  Ans  (4 3 1 ) 
|  Create parameter->value binding: list = [4, 3, 1]
|  |  Eval (if (eq (length list )1 )list (sort (mergeSort (mselect list 0 (/ (length list )2 )))(mergeSort (mselect list (/ (length list )2 )(length list )))))
|  |  |  Eval (eq (length list )1 )
|  |  |  |  Eval (length list )
|  |  |  |  |  Calling function length
|  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  Eval list 
|  |  |  |  |  |  Found Value of list as [4, 3, 1]
|  |  |  |  |  |  Ans  (4 3 1 ) 
|  |  |  |  |  Create parameter->value binding: list = [4, 3, 1]
|  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  Found Value of list as [4, 3, 1]
|  |  |  |  |  |  |  |  Ans  (4 3 1 ) 
|  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  Found Value of list as [4, 3, 1]
|  |  |  |  |  |  |  |  |  |  |  Ans  (4 3 1 ) 
|  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 1]
|  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  Ans  3  
|  |  |  |  Ans  3  
|  |  |  |  Eval 1 
|  |  |  |  Ans  1  
|  |  |  Ans  False  
|  |  |  Eval (sort (mergeSort (mselect list 0 (/ (length list )2 )))(mergeSort (mselect list (/ (length list )2 )(length list ))))
|  |  |  |  Calling function sort
|  |  |  |  Found Value of sort_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['if', ['eq', 'list1', 'nil'], 'list0', ['if', ['<', ['first', 'list0'], ['first', 'list1']], ['cons', ['first', 'list0'], ['sort', ['rest', 'list0'], 'list1']], ['cons', ['first', 'list1'], ['sort', ['rest', 'list1'], 'list0']]]]])
|  |  |  |  |  Eval (mergeSort (mselect list 0 (/ (length list )2 )))
|  |  |  |  |  |  Calling function mergeSort
|  |  |  |  |  |  Found Value of mergeSort_defun as (['list'], ['if', ['eq', ['length', 'list'], 1], 'list', ['sort', ['mergeSort', ['mselect', 'list', 0, ['/', ['length', 'list'], 2]]], ['mergeSort', ['mselect', 'list', ['/', ['length', 'list'], 2], ['length', 'list']]]]])
|  |  |  |  |  |  |  Eval (mselect list 0 (/ (length list )2 ))
|  |  |  |  |  |  |  |  Calling function mselect
|  |  |  |  |  |  |  |  Found Value of mselect_defun as (['list', 'start', 'end'], ['flatten', ['cons', ['slice', ['get', 'list', 'start'], ['-', 'end', ['+', 'start', 1]]], 'nil']])
|  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  Found Value of list as [4, 3, 1]
|  |  |  |  |  |  |  |  |  Ans  (4 3 1 ) 
|  |  |  |  |  |  |  |  Create parameter->value binding: list = [4, 3, 1]
|  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  Create parameter->value binding: start = 0
|  |  |  |  |  |  |  |  |  Eval (/ (length list )2 )
|  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [4, 3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [4, 3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [4, 3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [4, 3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  Eval 2 
|  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  Create parameter->value binding: end = 1
|  |  |  |  |  |  |  |  |  Eval (flatten (cons (slice (get list start )(- end (+ start 1 )))nil ))
|  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  Eval (cons (slice (get list start )(- end (+ start 1 )))nil )
|  |  |  |  |  |  |  |  |  |  |  |  Eval (slice (get list start )(- end (+ start 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  Calling function slice
|  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of slice_defun as (['list', 'idx'], ['if', ['atom', 'list'], 'list', ['if', ['eq', 0, 'idx'], ['first', 'list'], ['cons', ['first', 'list'], ['cons', ['slice', ['rest', 'list'], ['-', 'idx', 1]], 'nil']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (get list start )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function get
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of get_defun as (['list', 'idx'], ['if', ['eq', 'list', 'nil'], 'nil', ['if', ['eq', 0, 'idx'], 'list', ['get', ['rest', 'list'], ['-', 'idx', 1]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [4, 3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [4, 3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval start 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of start as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )nil (if (eq 0 idx )list (get (rest list )(- idx 1 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [4, 3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )list (get (rest list )(- idx 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [4, 3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [4, 3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- end (+ start 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval end 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of end as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ start 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval start 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of start as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom list )list (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [4, 3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [4, 3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  Ans  (4 ) 
|  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [4]
|  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [4]
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 ) 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [4]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first expr )(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [4]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [4]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 ) 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 ) 
|  |  |  |  |  |  |  |  |  |  |  Ans  (4 ) 
|  |  |  |  |  |  |  |  |  Ans  (4 ) 
|  |  |  |  |  |  |  Ans  (4 ) 
|  |  |  |  |  |  Create parameter->value binding: list = [4]
|  |  |  |  |  |  |  Eval (if (eq (length list )1 )list (sort (mergeSort (mselect list 0 (/ (length list )2 )))(mergeSort (mselect list (/ (length list )2 )(length list )))))
|  |  |  |  |  |  |  |  Eval (eq (length list )1 )
|  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  Found Value of list as [4]
|  |  |  |  |  |  |  |  |  |  |  Ans  (4 ) 
|  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [4]
|  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [4]
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [4]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  Found Value of list as [4]
|  |  |  |  |  |  |  |  Ans  (4 ) 
|  |  |  |  |  |  |  Ans  (4 ) 
|  |  |  |  |  Ans  (4 ) 
|  |  |  |  Create parameter->value binding: list0 = [4]
|  |  |  |  |  Eval (mergeSort (mselect list (/ (length list )2 )(length list )))
|  |  |  |  |  |  Calling function mergeSort
|  |  |  |  |  |  Found Value of mergeSort_defun as (['list'], ['if', ['eq', ['length', 'list'], 1], 'list', ['sort', ['mergeSort', ['mselect', 'list', 0, ['/', ['length', 'list'], 2]]], ['mergeSort', ['mselect', 'list', ['/', ['length', 'list'], 2], ['length', 'list']]]]])
|  |  |  |  |  |  |  Eval (mselect list (/ (length list )2 )(length list ))
|  |  |  |  |  |  |  |  Calling function mselect
|  |  |  |  |  |  |  |  Found Value of mselect_defun as (['list', 'start', 'end'], ['flatten', ['cons', ['slice', ['get', 'list', 'start'], ['-', 'end', ['+', 'start', 1]]], 'nil']])
|  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  Found Value of list as [4, 3, 1]
|  |  |  |  |  |  |  |  |  Ans  (4 3 1 ) 
|  |  |  |  |  |  |  |  Create parameter->value binding: list = [4, 3, 1]
|  |  |  |  |  |  |  |  |  Eval (/ (length list )2 )
|  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [4, 3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [4, 3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [4, 3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [4, 3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  Eval 2 
|  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  Create parameter->value binding: start = 1
|  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  Found Value of list as [4, 3, 1]
|  |  |  |  |  |  |  |  |  |  |  Ans  (4 3 1 ) 
|  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [4, 3, 1]
|  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [4, 3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [4, 3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  Create parameter->value binding: end = 3
|  |  |  |  |  |  |  |  |  Eval (flatten (cons (slice (get list start )(- end (+ start 1 )))nil ))
|  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  Eval (cons (slice (get list start )(- end (+ start 1 )))nil )
|  |  |  |  |  |  |  |  |  |  |  |  Eval (slice (get list start )(- end (+ start 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  Calling function slice
|  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of slice_defun as (['list', 'idx'], ['if', ['atom', 'list'], 'list', ['if', ['eq', 0, 'idx'], ['first', 'list'], ['cons', ['first', 'list'], ['cons', ['slice', ['rest', 'list'], ['-', 'idx', 1]], 'nil']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (get list start )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function get
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of get_defun as (['list', 'idx'], ['if', ['eq', 'list', 'nil'], 'nil', ['if', ['eq', 0, 'idx'], 'list', ['get', ['rest', 'list'], ['-', 'idx', 1]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [4, 3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [4, 3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval start 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of start as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )nil (if (eq 0 idx )list (get (rest list )(- idx 1 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [4, 3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )list (get (rest list )(- idx 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (get (rest list )(- idx 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function get
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of get_defun as (['list', 'idx'], ['if', ['eq', 'list', 'nil'], 'nil', ['if', ['eq', 0, 'idx'], 'list', ['get', ['rest', 'list'], ['-', 'idx', 1]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [4, 3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- idx 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )nil (if (eq 0 idx )list (get (rest list )(- idx 1 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )list (get (rest list )(- idx 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- end (+ start 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval end 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of end as 3
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ start 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval start 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of start as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom list )list (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (slice (rest list )(- idx 1 ))nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (slice (rest list )(- idx 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function slice
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of slice_defun as (['list', 'idx'], ['if', ['atom', 'list'], 'list', ['if', ['eq', 0, 'idx'], ['first', 'list'], ['cons', ['first', 'list'], ['cons', ['slice', ['rest', 'list'], ['-', 'idx', 1]], 'nil']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- idx 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom list )list (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  Ans  ((3 1 )) 
|  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [[3, 1]]
|  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[3, 1]]
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((3 1 )) 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[3, 1]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((3 1 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (append (flatten (first expr ))(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function append
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of append_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['cons', ['first', 'list0'], ['append', ['rest', 'list0'], 'list1']]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[3, 1]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((3 1 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first expr )(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first expr )(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[3, 1]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((3 1 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (cons (first list0 )(append (rest list0 )list1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list0 )(append (rest list0 )list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (append (rest list0 )list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function append
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of append_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['cons', ['first', 'list0'], ['append', ['rest', 'list0'], 'list1']]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (cons (first list0 )(append (rest list0 )list1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list0 )(append (rest list0 )list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (append (rest list0 )list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function append
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of append_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['cons', ['first', 'list0'], ['append', ['rest', 'list0'], 'list1']]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (cons (first list0 )(append (rest list0 )list1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  Create parameter->value binding: list = [3, 1]
|  |  |  |  |  |  |  Eval (if (eq (length list )1 )list (sort (mergeSort (mselect list 0 (/ (length list )2 )))(mergeSort (mselect list (/ (length list )2 )(length list )))))
|  |  |  |  |  |  |  |  Eval (eq (length list )1 )
|  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 1]
|  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  Eval (sort (mergeSort (mselect list 0 (/ (length list )2 )))(mergeSort (mselect list (/ (length list )2 )(length list ))))
|  |  |  |  |  |  |  |  |  Calling function sort
|  |  |  |  |  |  |  |  |  Found Value of sort_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['if', ['eq', 'list1', 'nil'], 'list0', ['if', ['<', ['first', 'list0'], ['first', 'list1']], ['cons', ['first', 'list0'], ['sort', ['rest', 'list0'], 'list1']], ['cons', ['first', 'list1'], ['sort', ['rest', 'list1'], 'list0']]]]])
|  |  |  |  |  |  |  |  |  |  Eval (mergeSort (mselect list 0 (/ (length list )2 )))
|  |  |  |  |  |  |  |  |  |  |  Calling function mergeSort
|  |  |  |  |  |  |  |  |  |  |  Found Value of mergeSort_defun as (['list'], ['if', ['eq', ['length', 'list'], 1], 'list', ['sort', ['mergeSort', ['mselect', 'list', 0, ['/', ['length', 'list'], 2]]], ['mergeSort', ['mselect', 'list', ['/', ['length', 'list'], 2], ['length', 'list']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  Eval (mselect list 0 (/ (length list )2 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  Calling function mselect
|  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of mselect_defun as (['list', 'start', 'end'], ['flatten', ['cons', ['slice', ['get', 'list', 'start'], ['-', 'end', ['+', 'start', 1]]], 'nil']])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: start = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (/ (length list )2 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 2 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: end = 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (cons (slice (get list start )(- end (+ start 1 )))nil ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (slice (get list start )(- end (+ start 1 )))nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (slice (get list start )(- end (+ start 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function slice
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of slice_defun as (['list', 'idx'], ['if', ['atom', 'list'], 'list', ['if', ['eq', 0, 'idx'], ['first', 'list'], ['cons', ['first', 'list'], ['cons', ['slice', ['rest', 'list'], ['-', 'idx', 1]], 'nil']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (get list start )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function get
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of get_defun as (['list', 'idx'], ['if', ['eq', 'list', 'nil'], 'nil', ['if', ['eq', 0, 'idx'], 'list', ['get', ['rest', 'list'], ['-', 'idx', 1]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval start 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of start as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )nil (if (eq 0 idx )list (get (rest list )(- idx 1 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )list (get (rest list )(- idx 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- end (+ start 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval end 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of end as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ start 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval start 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of start as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom list )list (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first expr )(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3]
|  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq (length list )1 )list (sort (mergeSort (mselect list 0 (/ (length list )2 )))(mergeSort (mselect list (/ (length list )2 )(length list )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq (length list )1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [3]
|  |  |  |  |  |  |  |  |  |  Eval (mergeSort (mselect list (/ (length list )2 )(length list )))
|  |  |  |  |  |  |  |  |  |  |  Calling function mergeSort
|  |  |  |  |  |  |  |  |  |  |  Found Value of mergeSort_defun as (['list'], ['if', ['eq', ['length', 'list'], 1], 'list', ['sort', ['mergeSort', ['mselect', 'list', 0, ['/', ['length', 'list'], 2]]], ['mergeSort', ['mselect', 'list', ['/', ['length', 'list'], 2], ['length', 'list']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  Eval (mselect list (/ (length list )2 )(length list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  Calling function mselect
|  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of mselect_defun as (['list', 'start', 'end'], ['flatten', ['cons', ['slice', ['get', 'list', 'start'], ['-', 'end', ['+', 'start', 1]]], 'nil']])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (/ (length list )2 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 2 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: start = 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: end = 2
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (cons (slice (get list start )(- end (+ start 1 )))nil ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (slice (get list start )(- end (+ start 1 )))nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (slice (get list start )(- end (+ start 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function slice
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of slice_defun as (['list', 'idx'], ['if', ['atom', 'list'], 'list', ['if', ['eq', 0, 'idx'], ['first', 'list'], ['cons', ['first', 'list'], ['cons', ['slice', ['rest', 'list'], ['-', 'idx', 1]], 'nil']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (get list start )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function get
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of get_defun as (['list', 'idx'], ['if', ['eq', 'list', 'nil'], 'nil', ['if', ['eq', 0, 'idx'], 'list', ['get', ['rest', 'list'], ['-', 'idx', 1]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval start 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of start as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )nil (if (eq 0 idx )list (get (rest list )(- idx 1 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )list (get (rest list )(- idx 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (get (rest list )(- idx 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function get
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of get_defun as (['list', 'idx'], ['if', ['eq', 'list', 'nil'], 'nil', ['if', ['eq', 0, 'idx'], 'list', ['get', ['rest', 'list'], ['-', 'idx', 1]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- idx 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )nil (if (eq 0 idx )list (get (rest list )(- idx 1 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )list (get (rest list )(- idx 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- end (+ start 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval end 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of end as 2
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ start 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval start 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of start as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom list )list (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first expr )(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1]
|  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq (length list )1 )list (sort (mergeSort (mselect list 0 (/ (length list )2 )))(mergeSort (mselect list (/ (length list )2 )(length list )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq (length list )1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = [1]
|  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))))
|  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [3]
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 ))))
|  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list1 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  Eval (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (< (first list0 )(first list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list1 )(sort (rest list1 )list0 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (sort (rest list1 )list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function sort
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of sort_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['if', ['eq', 'list1', 'nil'], 'list0', ['if', ['<', ['first', 'list0'], ['first', 'list1']], ['cons', ['first', 'list0'], ['sort', ['rest', 'list0'], 'list1']], ['cons', ['first', 'list1'], ['sort', ['rest', 'list1'], 'list0']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 3 ) 
|  |  |  |  |  |  |  |  |  |  |  Ans  (1 3 ) 
|  |  |  |  |  |  |  |  |  |  Ans  (1 3 ) 
|  |  |  |  |  |  |  |  Ans  (1 3 ) 
|  |  |  |  |  |  |  Ans  (1 3 ) 
|  |  |  |  |  Ans  (1 3 ) 
|  |  |  |  Create parameter->value binding: list1 = [1, 3]
|  |  |  |  |  Eval (if (eq list0 nil )list1 (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))))
|  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  Found Value of list0 as [4]
|  |  |  |  |  |  |  Ans  (4 ) 
|  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  Eval (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 ))))
|  |  |  |  |  |  |  Eval (eq list1 nil )
|  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  Found Value of list1 as [1, 3]
|  |  |  |  |  |  |  |  Ans  (1 3 ) 
|  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  Eval (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))
|  |  |  |  |  |  |  |  Eval (< (first list0 )(first list1 ))
|  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  Found Value of list0 as [4]
|  |  |  |  |  |  |  |  |  |  Ans  (4 ) 
|  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  Eval (first list1 )
|  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  Found Value of list1 as [1, 3]
|  |  |  |  |  |  |  |  |  |  Ans  (1 3 ) 
|  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  Eval (cons (first list1 )(sort (rest list1 )list0 ))
|  |  |  |  |  |  |  |  |  Eval (first list1 )
|  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  Found Value of list1 as [1, 3]
|  |  |  |  |  |  |  |  |  |  Ans  (1 3 ) 
|  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  Eval (sort (rest list1 )list0 )
|  |  |  |  |  |  |  |  |  |  Calling function sort
|  |  |  |  |  |  |  |  |  |  Found Value of sort_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['if', ['eq', 'list1', 'nil'], 'list0', ['if', ['<', ['first', 'list0'], ['first', 'list1']], ['cons', ['first', 'list0'], ['sort', ['rest', 'list0'], 'list1']], ['cons', ['first', 'list1'], ['sort', ['rest', 'list1'], 'list0']]]]])
|  |  |  |  |  |  |  |  |  |  |  Eval (rest list1 )
|  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [1, 3]
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 3 ) 
|  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [3]
|  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [4]
|  |  |  |  |  |  |  |  |  |  |  Ans  (4 ) 
|  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = [4]
|  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))))
|  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list1 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [4]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (< (first list0 )(first list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [4]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list0 )(sort (rest list0 )list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (sort (rest list0 )list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function sort
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of sort_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['if', ['eq', 'list1', 'nil'], 'list0', ['if', ['<', ['first', 'list0'], ['first', 'list1']], ['cons', ['first', 'list0'], ['sort', ['rest', 'list0'], 'list1']], ['cons', ['first', 'list1'], ['sort', ['rest', 'list1'], 'list0']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [4]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = [4]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [4]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (4 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 4 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 4 ) 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 4 ) 
|  |  |  |  |  |  |  |  |  |  |  Ans  (3 4 ) 
|  |  |  |  |  |  |  |  |  Ans  (3 4 ) 
|  |  |  |  |  |  |  |  Ans  (1 3 4 ) 
|  |  |  |  |  |  |  Ans  (1 3 4 ) 
|  |  |  |  |  |  Ans  (1 3 4 ) 
|  |  |  |  |  Ans  (1 3 4 ) 
|  |  |  Ans  (1 3 4 ) 
|  |  Ans  (1 3 4 ) 
Ans  (1 3 4 ) 
Eval (mergeSort (quote (6 3 2 1 5 7 10 )))
|  Calling function mergeSort
|  Found Value of mergeSort_defun as (['list'], ['if', ['eq', ['length', 'list'], 1], 'list', ['sort', ['mergeSort', ['mselect', 'list', 0, ['/', ['length', 'list'], 2]]], ['mergeSort', ['mselect', 'list', ['/', ['length', 'list'], 2], ['length', 'list']]]]])
|  |  Eval (quote (6 3 2 1 5 7 10 ))
|  |  Ans  (6 3 2 1 5 7 10 ) 
|  Create parameter->value binding: list = [6, 3, 2, 1, 5, 7, 10]
|  |  Eval (if (eq (length list )1 )list (sort (mergeSort (mselect list 0 (/ (length list )2 )))(mergeSort (mselect list (/ (length list )2 )(length list )))))
|  |  |  Eval (eq (length list )1 )
|  |  |  |  Eval (length list )
|  |  |  |  |  Calling function length
|  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  Eval list 
|  |  |  |  |  |  Found Value of list as [6, 3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  Ans  (6 3 2 1 5 7 10 ) 
|  |  |  |  |  Create parameter->value binding: list = [6, 3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  Ans  (6 3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  Ans  (3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  Ans  6  
|  |  |  |  |  |  |  |  |  |  Ans  6  
|  |  |  |  |  |  |  |  Ans  6  
|  |  |  |  |  |  |  Ans  7  
|  |  |  |  |  |  Ans  7  
|  |  |  |  Ans  7  
|  |  |  |  Eval 1 
|  |  |  |  Ans  1  
|  |  |  Ans  False  
|  |  |  Eval (sort (mergeSort (mselect list 0 (/ (length list )2 )))(mergeSort (mselect list (/ (length list )2 )(length list ))))
|  |  |  |  Calling function sort
|  |  |  |  Found Value of sort_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['if', ['eq', 'list1', 'nil'], 'list0', ['if', ['<', ['first', 'list0'], ['first', 'list1']], ['cons', ['first', 'list0'], ['sort', ['rest', 'list0'], 'list1']], ['cons', ['first', 'list1'], ['sort', ['rest', 'list1'], 'list0']]]]])
|  |  |  |  |  Eval (mergeSort (mselect list 0 (/ (length list )2 )))
|  |  |  |  |  |  Calling function mergeSort
|  |  |  |  |  |  Found Value of mergeSort_defun as (['list'], ['if', ['eq', ['length', 'list'], 1], 'list', ['sort', ['mergeSort', ['mselect', 'list', 0, ['/', ['length', 'list'], 2]]], ['mergeSort', ['mselect', 'list', ['/', ['length', 'list'], 2], ['length', 'list']]]]])
|  |  |  |  |  |  |  Eval (mselect list 0 (/ (length list )2 ))
|  |  |  |  |  |  |  |  Calling function mselect
|  |  |  |  |  |  |  |  Found Value of mselect_defun as (['list', 'start', 'end'], ['flatten', ['cons', ['slice', ['get', 'list', 'start'], ['-', 'end', ['+', 'start', 1]]], 'nil']])
|  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  Ans  (6 3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  Create parameter->value binding: list = [6, 3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  Create parameter->value binding: start = 0
|  |  |  |  |  |  |  |  |  Eval (/ (length list )2 )
|  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [6, 3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  6  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  6  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  6  
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  7  
|  |  |  |  |  |  |  |  |  |  |  |  Ans  7  
|  |  |  |  |  |  |  |  |  |  Ans  7  
|  |  |  |  |  |  |  |  |  |  Eval 2 
|  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  Create parameter->value binding: end = 3
|  |  |  |  |  |  |  |  |  Eval (flatten (cons (slice (get list start )(- end (+ start 1 )))nil ))
|  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  Eval (cons (slice (get list start )(- end (+ start 1 )))nil )
|  |  |  |  |  |  |  |  |  |  |  |  Eval (slice (get list start )(- end (+ start 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  Calling function slice
|  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of slice_defun as (['list', 'idx'], ['if', ['atom', 'list'], 'list', ['if', ['eq', 0, 'idx'], ['first', 'list'], ['cons', ['first', 'list'], ['cons', ['slice', ['rest', 'list'], ['-', 'idx', 1]], 'nil']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (get list start )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function get
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of get_defun as (['list', 'idx'], ['if', ['eq', 'list', 'nil'], 'nil', ['if', ['eq', 0, 'idx'], 'list', ['get', ['rest', 'list'], ['-', 'idx', 1]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [6, 3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval start 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of start as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )nil (if (eq 0 idx )list (get (rest list )(- idx 1 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )list (get (rest list )(- idx 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [6, 3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- end (+ start 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval end 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of end as 3
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ start 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval start 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of start as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 2
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom list )list (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 2
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  6  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (slice (rest list )(- idx 1 ))nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (slice (rest list )(- idx 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function slice
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of slice_defun as (['list', 'idx'], ['if', ['atom', 'list'], 'list', ['if', ['eq', 0, 'idx'], ['first', 'list'], ['cons', ['first', 'list'], ['cons', ['slice', ['rest', 'list'], ['-', 'idx', 1]], 'nil']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- idx 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 2
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom list )list (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (slice (rest list )(- idx 1 ))nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (slice (rest list )(- idx 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function slice
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of slice_defun as (['list', 'idx'], ['if', ['atom', 'list'], 'list', ['if', ['eq', 0, 'idx'], ['first', 'list'], ['cons', ['first', 'list'], ['cons', ['slice', ['rest', 'list'], ['-', 'idx', 1]], 'nil']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- idx 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom list )list (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((3 2 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 (3 2 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 (3 2 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 (3 2 )) 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 (3 2 )) 
|  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  Ans  ((6 (3 2 ))) 
|  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [[6, [3, 2]]]
|  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[6, [3, 2]]]
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((6 (3 2 ))) 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[6, [3, 2]]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((6 (3 2 ))) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 (3 2 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (append (flatten (first expr ))(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function append
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of append_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['cons', ['first', 'list0'], ['append', ['rest', 'list0'], 'list1']]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[6, [3, 2]]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((6 (3 2 ))) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 (3 2 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [6, [3, 2]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [6, [3, 2]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 (3 2 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [6, [3, 2]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 (3 2 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  6  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first expr )(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [6, [3, 2]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 (3 2 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  6  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [6, [3, 2]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 (3 2 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((3 2 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [[3, 2]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[3, 2]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((3 2 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[3, 2]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((3 2 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (append (flatten (first expr ))(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function append
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of append_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['cons', ['first', 'list0'], ['append', ['rest', 'list0'], 'list1']]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[3, 2]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((3 2 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first expr )(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first expr )(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[3, 2]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((3 2 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (cons (first list0 )(append (rest list0 )list1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list0 )(append (rest list0 )list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (append (rest list0 )list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function append
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of append_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['cons', ['first', 'list0'], ['append', ['rest', 'list0'], 'list1']]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (cons (first list0 )(append (rest list0 )list1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list0 )(append (rest list0 )list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (append (rest list0 )list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function append
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of append_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['cons', ['first', 'list0'], ['append', ['rest', 'list0'], 'list1']]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (cons (first list0 )(append (rest list0 )list1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[6, [3, 2]]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((6 (3 2 ))) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (cons (first list0 )(append (rest list0 )list1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list0 )(append (rest list0 )list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  6  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (append (rest list0 )list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function append
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of append_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['cons', ['first', 'list0'], ['append', ['rest', 'list0'], 'list1']]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (cons (first list0 )(append (rest list0 )list1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list0 )(append (rest list0 )list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (append (rest list0 )list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function append
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of append_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['cons', ['first', 'list0'], ['append', ['rest', 'list0'], 'list1']]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (cons (first list0 )(append (rest list0 )list1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list0 )(append (rest list0 )list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (append (rest list0 )list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function append
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of append_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['cons', ['first', 'list0'], ['append', ['rest', 'list0'], 'list1']]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (cons (first list0 )(append (rest list0 )list1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  Create parameter->value binding: list = [6, 3, 2]
|  |  |  |  |  |  |  Eval (if (eq (length list )1 )list (sort (mergeSort (mselect list 0 (/ (length list )2 )))(mergeSort (mselect list (/ (length list )2 )(length list )))))
|  |  |  |  |  |  |  |  Eval (eq (length list )1 )
|  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  Eval (sort (mergeSort (mselect list 0 (/ (length list )2 )))(mergeSort (mselect list (/ (length list )2 )(length list ))))
|  |  |  |  |  |  |  |  |  Calling function sort
|  |  |  |  |  |  |  |  |  Found Value of sort_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['if', ['eq', 'list1', 'nil'], 'list0', ['if', ['<', ['first', 'list0'], ['first', 'list1']], ['cons', ['first', 'list0'], ['sort', ['rest', 'list0'], 'list1']], ['cons', ['first', 'list1'], ['sort', ['rest', 'list1'], 'list0']]]]])
|  |  |  |  |  |  |  |  |  |  Eval (mergeSort (mselect list 0 (/ (length list )2 )))
|  |  |  |  |  |  |  |  |  |  |  Calling function mergeSort
|  |  |  |  |  |  |  |  |  |  |  Found Value of mergeSort_defun as (['list'], ['if', ['eq', ['length', 'list'], 1], 'list', ['sort', ['mergeSort', ['mselect', 'list', 0, ['/', ['length', 'list'], 2]]], ['mergeSort', ['mselect', 'list', ['/', ['length', 'list'], 2], ['length', 'list']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  Eval (mselect list 0 (/ (length list )2 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  Calling function mselect
|  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of mselect_defun as (['list', 'start', 'end'], ['flatten', ['cons', ['slice', ['get', 'list', 'start'], ['-', 'end', ['+', 'start', 1]]], 'nil']])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: start = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (/ (length list )2 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 2 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: end = 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (cons (slice (get list start )(- end (+ start 1 )))nil ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (slice (get list start )(- end (+ start 1 )))nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (slice (get list start )(- end (+ start 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function slice
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of slice_defun as (['list', 'idx'], ['if', ['atom', 'list'], 'list', ['if', ['eq', 0, 'idx'], ['first', 'list'], ['cons', ['first', 'list'], ['cons', ['slice', ['rest', 'list'], ['-', 'idx', 1]], 'nil']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (get list start )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function get
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of get_defun as (['list', 'idx'], ['if', ['eq', 'list', 'nil'], 'nil', ['if', ['eq', 0, 'idx'], 'list', ['get', ['rest', 'list'], ['-', 'idx', 1]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval start 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of start as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )nil (if (eq 0 idx )list (get (rest list )(- idx 1 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )list (get (rest list )(- idx 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- end (+ start 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval end 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of end as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ start 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval start 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of start as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom list )list (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  6  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  6  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  6  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  6  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  6  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first expr )(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  6  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [6]
|  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq (length list )1 )list (sort (mergeSort (mselect list 0 (/ (length list )2 )))(mergeSort (mselect list (/ (length list )2 )(length list )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq (length list )1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6]
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [6]
|  |  |  |  |  |  |  |  |  |  Eval (mergeSort (mselect list (/ (length list )2 )(length list )))
|  |  |  |  |  |  |  |  |  |  |  Calling function mergeSort
|  |  |  |  |  |  |  |  |  |  |  Found Value of mergeSort_defun as (['list'], ['if', ['eq', ['length', 'list'], 1], 'list', ['sort', ['mergeSort', ['mselect', 'list', 0, ['/', ['length', 'list'], 2]]], ['mergeSort', ['mselect', 'list', ['/', ['length', 'list'], 2], ['length', 'list']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  Eval (mselect list (/ (length list )2 )(length list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  Calling function mselect
|  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of mselect_defun as (['list', 'start', 'end'], ['flatten', ['cons', ['slice', ['get', 'list', 'start'], ['-', 'end', ['+', 'start', 1]]], 'nil']])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (/ (length list )2 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 2 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: start = 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: end = 3
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (cons (slice (get list start )(- end (+ start 1 )))nil ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (slice (get list start )(- end (+ start 1 )))nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (slice (get list start )(- end (+ start 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function slice
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of slice_defun as (['list', 'idx'], ['if', ['atom', 'list'], 'list', ['if', ['eq', 0, 'idx'], ['first', 'list'], ['cons', ['first', 'list'], ['cons', ['slice', ['rest', 'list'], ['-', 'idx', 1]], 'nil']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (get list start )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function get
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of get_defun as (['list', 'idx'], ['if', ['eq', 'list', 'nil'], 'nil', ['if', ['eq', 0, 'idx'], 'list', ['get', ['rest', 'list'], ['-', 'idx', 1]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval start 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of start as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )nil (if (eq 0 idx )list (get (rest list )(- idx 1 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )list (get (rest list )(- idx 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (get (rest list )(- idx 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function get
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of get_defun as (['list', 'idx'], ['if', ['eq', 'list', 'nil'], 'nil', ['if', ['eq', 0, 'idx'], 'list', ['get', ['rest', 'list'], ['-', 'idx', 1]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- idx 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )nil (if (eq 0 idx )list (get (rest list )(- idx 1 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )list (get (rest list )(- idx 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- end (+ start 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval end 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of end as 3
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ start 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval start 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of start as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom list )list (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (slice (rest list )(- idx 1 ))nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (slice (rest list )(- idx 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function slice
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of slice_defun as (['list', 'idx'], ['if', ['atom', 'list'], 'list', ['if', ['eq', 0, 'idx'], ['first', 'list'], ['cons', ['first', 'list'], ['cons', ['slice', ['rest', 'list'], ['-', 'idx', 1]], 'nil']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- idx 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom list )list (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((3 2 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [[3, 2]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[3, 2]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((3 2 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[3, 2]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((3 2 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (append (flatten (first expr ))(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function append
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of append_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['cons', ['first', 'list0'], ['append', ['rest', 'list0'], 'list1']]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[3, 2]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((3 2 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first expr )(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first expr )(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[3, 2]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((3 2 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (cons (first list0 )(append (rest list0 )list1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list0 )(append (rest list0 )list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (append (rest list0 )list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function append
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of append_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['cons', ['first', 'list0'], ['append', ['rest', 'list0'], 'list1']]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (cons (first list0 )(append (rest list0 )list1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list0 )(append (rest list0 )list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (append (rest list0 )list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function append
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of append_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['cons', ['first', 'list0'], ['append', ['rest', 'list0'], 'list1']]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (cons (first list0 )(append (rest list0 )list1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq (length list )1 )list (sort (mergeSort (mselect list 0 (/ (length list )2 )))(mergeSort (mselect list (/ (length list )2 )(length list )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq (length list )1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (sort (mergeSort (mselect list 0 (/ (length list )2 )))(mergeSort (mselect list (/ (length list )2 )(length list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function sort
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of sort_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['if', ['eq', 'list1', 'nil'], 'list0', ['if', ['<', ['first', 'list0'], ['first', 'list1']], ['cons', ['first', 'list0'], ['sort', ['rest', 'list0'], 'list1']], ['cons', ['first', 'list1'], ['sort', ['rest', 'list1'], 'list0']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (mergeSort (mselect list 0 (/ (length list )2 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function mergeSort
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of mergeSort_defun as (['list'], ['if', ['eq', ['length', 'list'], 1], 'list', ['sort', ['mergeSort', ['mselect', 'list', 0, ['/', ['length', 'list'], 2]]], ['mergeSort', ['mselect', 'list', ['/', ['length', 'list'], 2], ['length', 'list']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (mselect list 0 (/ (length list )2 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function mselect
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of mselect_defun as (['list', 'start', 'end'], ['flatten', ['cons', ['slice', ['get', 'list', 'start'], ['-', 'end', ['+', 'start', 1]]], 'nil']])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: start = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (/ (length list )2 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 2 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: end = 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (cons (slice (get list start )(- end (+ start 1 )))nil ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (slice (get list start )(- end (+ start 1 )))nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (slice (get list start )(- end (+ start 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function slice
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of slice_defun as (['list', 'idx'], ['if', ['atom', 'list'], 'list', ['if', ['eq', 0, 'idx'], ['first', 'list'], ['cons', ['first', 'list'], ['cons', ['slice', ['rest', 'list'], ['-', 'idx', 1]], 'nil']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (get list start )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function get
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of get_defun as (['list', 'idx'], ['if', ['eq', 'list', 'nil'], 'nil', ['if', ['eq', 0, 'idx'], 'list', ['get', ['rest', 'list'], ['-', 'idx', 1]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval start 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of start as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )nil (if (eq 0 idx )list (get (rest list )(- idx 1 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )list (get (rest list )(- idx 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- end (+ start 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval end 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of end as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ start 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval start 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of start as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom list )list (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first expr )(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq (length list )1 )list (sort (mergeSort (mselect list 0 (/ (length list )2 )))(mergeSort (mselect list (/ (length list )2 )(length list )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq (length list )1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (mergeSort (mselect list (/ (length list )2 )(length list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function mergeSort
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of mergeSort_defun as (['list'], ['if', ['eq', ['length', 'list'], 1], 'list', ['sort', ['mergeSort', ['mselect', 'list', 0, ['/', ['length', 'list'], 2]]], ['mergeSort', ['mselect', 'list', ['/', ['length', 'list'], 2], ['length', 'list']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (mselect list (/ (length list )2 )(length list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function mselect
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of mselect_defun as (['list', 'start', 'end'], ['flatten', ['cons', ['slice', ['get', 'list', 'start'], ['-', 'end', ['+', 'start', 1]]], 'nil']])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (/ (length list )2 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 2 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: start = 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: end = 2
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (cons (slice (get list start )(- end (+ start 1 )))nil ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (slice (get list start )(- end (+ start 1 )))nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (slice (get list start )(- end (+ start 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function slice
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of slice_defun as (['list', 'idx'], ['if', ['atom', 'list'], 'list', ['if', ['eq', 0, 'idx'], ['first', 'list'], ['cons', ['first', 'list'], ['cons', ['slice', ['rest', 'list'], ['-', 'idx', 1]], 'nil']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (get list start )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function get
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of get_defun as (['list', 'idx'], ['if', ['eq', 'list', 'nil'], 'nil', ['if', ['eq', 0, 'idx'], 'list', ['get', ['rest', 'list'], ['-', 'idx', 1]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval start 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of start as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )nil (if (eq 0 idx )list (get (rest list )(- idx 1 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )list (get (rest list )(- idx 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (get (rest list )(- idx 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function get
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of get_defun as (['list', 'idx'], ['if', ['eq', 'list', 'nil'], 'nil', ['if', ['eq', 0, 'idx'], 'list', ['get', ['rest', 'list'], ['-', 'idx', 1]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- idx 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )nil (if (eq 0 idx )list (get (rest list )(- idx 1 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )list (get (rest list )(- idx 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- end (+ start 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval end 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of end as 2
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ start 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval start 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of start as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom list )list (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first expr )(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq (length list )1 )list (sort (mergeSort (mselect list 0 (/ (length list )2 )))(mergeSort (mselect list (/ (length list )2 )(length list )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq (length list )1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list1 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (< (first list0 )(first list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list1 )(sort (rest list1 )list0 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (sort (rest list1 )list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function sort
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of sort_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['if', ['eq', 'list1', 'nil'], 'list0', ['if', ['<', ['first', 'list0'], ['first', 'list1']], ['cons', ['first', 'list0'], ['sort', ['rest', 'list0'], 'list1']], ['cons', ['first', 'list1'], ['sort', ['rest', 'list1'], 'list0']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [2]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 3 ) 
|  |  |  |  |  |  |  |  |  |  Ans  (2 3 ) 
|  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = [2, 3]
|  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))))
|  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [6]
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 ))))
|  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list1 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [2, 3]
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  Eval (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (< (first list0 )(first list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  6  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [2, 3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list1 )(sort (rest list1 )list0 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [2, 3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (sort (rest list1 )list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function sort
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of sort_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['if', ['eq', 'list1', 'nil'], 'list0', ['if', ['<', ['first', 'list0'], ['first', 'list1']], ['cons', ['first', 'list0'], ['sort', ['rest', 'list0'], 'list1']], ['cons', ['first', 'list1'], ['sort', ['rest', 'list1'], 'list0']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [2, 3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = [6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list1 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (< (first list0 )(first list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  6  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list0 )(sort (rest list0 )list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (sort (rest list0 )list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function sort
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of sort_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['if', ['eq', 'list1', 'nil'], 'list0', ['if', ['<', ['first', 'list0'], ['first', 'list1']], ['cons', ['first', 'list0'], ['sort', ['rest', 'list0'], 'list1']], ['cons', ['first', 'list1'], ['sort', ['rest', 'list1'], 'list0']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [3]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = [6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 3 6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 3 6 ) 
|  |  |  |  |  |  |  |  |  |  |  Ans  (2 3 6 ) 
|  |  |  |  |  |  |  |  |  |  Ans  (2 3 6 ) 
|  |  |  |  |  |  |  |  Ans  (2 3 6 ) 
|  |  |  |  |  |  |  Ans  (2 3 6 ) 
|  |  |  |  |  Ans  (2 3 6 ) 
|  |  |  |  Create parameter->value binding: list0 = [2, 3, 6]
|  |  |  |  |  Eval (mergeSort (mselect list (/ (length list )2 )(length list )))
|  |  |  |  |  |  Calling function mergeSort
|  |  |  |  |  |  Found Value of mergeSort_defun as (['list'], ['if', ['eq', ['length', 'list'], 1], 'list', ['sort', ['mergeSort', ['mselect', 'list', 0, ['/', ['length', 'list'], 2]]], ['mergeSort', ['mselect', 'list', ['/', ['length', 'list'], 2], ['length', 'list']]]]])
|  |  |  |  |  |  |  Eval (mselect list (/ (length list )2 )(length list ))
|  |  |  |  |  |  |  |  Calling function mselect
|  |  |  |  |  |  |  |  Found Value of mselect_defun as (['list', 'start', 'end'], ['flatten', ['cons', ['slice', ['get', 'list', 'start'], ['-', 'end', ['+', 'start', 1]]], 'nil']])
|  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  Ans  (6 3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  Create parameter->value binding: list = [6, 3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  Eval (/ (length list )2 )
|  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [6, 3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  6  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  6  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  6  
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  7  
|  |  |  |  |  |  |  |  |  |  |  |  Ans  7  
|  |  |  |  |  |  |  |  |  |  Ans  7  
|  |  |  |  |  |  |  |  |  |  Eval 2 
|  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  Create parameter->value binding: start = 3
|  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [6, 3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  6  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  6  
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  6  
|  |  |  |  |  |  |  |  |  |  |  |  Ans  7  
|  |  |  |  |  |  |  |  |  |  |  Ans  7  
|  |  |  |  |  |  |  |  |  Ans  7  
|  |  |  |  |  |  |  |  Create parameter->value binding: end = 7
|  |  |  |  |  |  |  |  |  Eval (flatten (cons (slice (get list start )(- end (+ start 1 )))nil ))
|  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  Eval (cons (slice (get list start )(- end (+ start 1 )))nil )
|  |  |  |  |  |  |  |  |  |  |  |  Eval (slice (get list start )(- end (+ start 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  Calling function slice
|  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of slice_defun as (['list', 'idx'], ['if', ['atom', 'list'], 'list', ['if', ['eq', 0, 'idx'], ['first', 'list'], ['cons', ['first', 'list'], ['cons', ['slice', ['rest', 'list'], ['-', 'idx', 1]], 'nil']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (get list start )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function get
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of get_defun as (['list', 'idx'], ['if', ['eq', 'list', 'nil'], 'nil', ['if', ['eq', 0, 'idx'], 'list', ['get', ['rest', 'list'], ['-', 'idx', 1]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [6, 3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval start 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of start as 3
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 3
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )nil (if (eq 0 idx )list (get (rest list )(- idx 1 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )list (get (rest list )(- idx 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 3
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (get (rest list )(- idx 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function get
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of get_defun as (['list', 'idx'], ['if', ['eq', 'list', 'nil'], 'nil', ['if', ['eq', 0, 'idx'], 'list', ['get', ['rest', 'list'], ['-', 'idx', 1]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [6, 3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- idx 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 3
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 2
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )nil (if (eq 0 idx )list (get (rest list )(- idx 1 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )list (get (rest list )(- idx 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 2
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (get (rest list )(- idx 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function get
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of get_defun as (['list', 'idx'], ['if', ['eq', 'list', 'nil'], 'nil', ['if', ['eq', 0, 'idx'], 'list', ['get', ['rest', 'list'], ['-', 'idx', 1]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [3, 2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- idx 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 2
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )nil (if (eq 0 idx )list (get (rest list )(- idx 1 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )list (get (rest list )(- idx 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (get (rest list )(- idx 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function get
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of get_defun as (['list', 'idx'], ['if', ['eq', 'list', 'nil'], 'nil', ['if', ['eq', 0, 'idx'], 'list', ['get', ['rest', 'list'], ['-', 'idx', 1]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [2, 1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- idx 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )nil (if (eq 0 idx )list (get (rest list )(- idx 1 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )list (get (rest list )(- idx 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- end (+ start 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval end 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of end as 7
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  7  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ start 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval start 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of start as 3
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 3
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom list )list (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 3
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (slice (rest list )(- idx 1 ))nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (slice (rest list )(- idx 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function slice
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of slice_defun as (['list', 'idx'], ['if', ['atom', 'list'], 'list', ['if', ['eq', 0, 'idx'], ['first', 'list'], ['cons', ['first', 'list'], ['cons', ['slice', ['rest', 'list'], ['-', 'idx', 1]], 'nil']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- idx 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 3
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 2
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom list )list (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 2
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (slice (rest list )(- idx 1 ))nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (slice (rest list )(- idx 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function slice
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of slice_defun as (['list', 'idx'], ['if', ['atom', 'list'], 'list', ['if', ['eq', 0, 'idx'], ['first', 'list'], ['cons', ['first', 'list'], ['cons', ['slice', ['rest', 'list'], ['-', 'idx', 1]], 'nil']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- idx 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 2
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom list )list (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  7  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (slice (rest list )(- idx 1 ))nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (slice (rest list )(- idx 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function slice
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of slice_defun as (['list', 'idx'], ['if', ['atom', 'list'], 'list', ['if', ['eq', 0, 'idx'], ['first', 'list'], ['cons', ['first', 'list'], ['cons', ['slice', ['rest', 'list'], ['-', 'idx', 1]], 'nil']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- idx 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom list )list (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  10  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  10  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  10  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  10  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((7 10 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 (7 10 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 (7 10 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 (7 10 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 (7 10 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((5 (7 10 ))) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 (5 (7 10 ))) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 (5 (7 10 ))) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 (5 (7 10 ))) 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 (5 (7 10 ))) 
|  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  Ans  ((1 (5 (7 10 )))) 
|  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [[1, [5, [7, 10]]]]
|  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[1, [5, [7, 10]]]]
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((1 (5 (7 10 )))) 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[1, [5, [7, 10]]]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((1 (5 (7 10 )))) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 (5 (7 10 ))) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (append (flatten (first expr ))(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function append
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of append_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['cons', ['first', 'list0'], ['append', ['rest', 'list0'], 'list1']]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[1, [5, [7, 10]]]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((1 (5 (7 10 )))) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 (5 (7 10 ))) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [1, [5, [7, 10]]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [1, [5, [7, 10]]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 (5 (7 10 ))) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [1, [5, [7, 10]]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 (5 (7 10 ))) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first expr )(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [1, [5, [7, 10]]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 (5 (7 10 ))) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [1, [5, [7, 10]]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 (5 (7 10 ))) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((5 (7 10 ))) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [[5, [7, 10]]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[5, [7, 10]]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((5 (7 10 ))) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[5, [7, 10]]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((5 (7 10 ))) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 (7 10 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (append (flatten (first expr ))(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function append
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of append_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['cons', ['first', 'list0'], ['append', ['rest', 'list0'], 'list1']]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[5, [7, 10]]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((5 (7 10 ))) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 (7 10 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [5, [7, 10]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [5, [7, 10]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 (7 10 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [5, [7, 10]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 (7 10 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first expr )(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [5, [7, 10]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 (7 10 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [5, [7, 10]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 (7 10 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((7 10 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [[7, 10]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[7, 10]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((7 10 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[7, 10]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((7 10 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (append (flatten (first expr ))(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function append
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of append_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['cons', ['first', 'list0'], ['append', ['rest', 'list0'], 'list1']]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[7, 10]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((7 10 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  7  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first expr )(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  7  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  10  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first expr )(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  10  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[7, 10]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((7 10 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (cons (first list0 )(append (rest list0 )list1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list0 )(append (rest list0 )list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  7  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (append (rest list0 )list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function append
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of append_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['cons', ['first', 'list0'], ['append', ['rest', 'list0'], 'list1']]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (cons (first list0 )(append (rest list0 )list1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list0 )(append (rest list0 )list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  10  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (append (rest list0 )list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function append
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of append_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['cons', ['first', 'list0'], ['append', ['rest', 'list0'], 'list1']]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (cons (first list0 )(append (rest list0 )list1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[5, [7, 10]]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((5 (7 10 ))) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (cons (first list0 )(append (rest list0 )list1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list0 )(append (rest list0 )list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (append (rest list0 )list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function append
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of append_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['cons', ['first', 'list0'], ['append', ['rest', 'list0'], 'list1']]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (cons (first list0 )(append (rest list0 )list1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list0 )(append (rest list0 )list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  7  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (append (rest list0 )list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function append
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of append_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['cons', ['first', 'list0'], ['append', ['rest', 'list0'], 'list1']]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (cons (first list0 )(append (rest list0 )list1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list0 )(append (rest list0 )list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  10  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (append (rest list0 )list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function append
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of append_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['cons', ['first', 'list0'], ['append', ['rest', 'list0'], 'list1']]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (cons (first list0 )(append (rest list0 )list1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[1, [5, [7, 10]]]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((1 (5 (7 10 )))) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (cons (first list0 )(append (rest list0 )list1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list0 )(append (rest list0 )list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (append (rest list0 )list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function append
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of append_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['cons', ['first', 'list0'], ['append', ['rest', 'list0'], 'list1']]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (cons (first list0 )(append (rest list0 )list1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list0 )(append (rest list0 )list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (append (rest list0 )list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function append
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of append_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['cons', ['first', 'list0'], ['append', ['rest', 'list0'], 'list1']]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (cons (first list0 )(append (rest list0 )list1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list0 )(append (rest list0 )list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  7  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (append (rest list0 )list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function append
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of append_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['cons', ['first', 'list0'], ['append', ['rest', 'list0'], 'list1']]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (cons (first list0 )(append (rest list0 )list1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list0 )(append (rest list0 )list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  10  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (append (rest list0 )list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function append
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of append_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['cons', ['first', 'list0'], ['append', ['rest', 'list0'], 'list1']]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (cons (first list0 )(append (rest list0 )list1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  Create parameter->value binding: list = [1, 5, 7, 10]
|  |  |  |  |  |  |  Eval (if (eq (length list )1 )list (sort (mergeSort (mselect list 0 (/ (length list )2 )))(mergeSort (mselect list (/ (length list )2 )(length list )))))
|  |  |  |  |  |  |  |  Eval (eq (length list )1 )
|  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  Eval (sort (mergeSort (mselect list 0 (/ (length list )2 )))(mergeSort (mselect list (/ (length list )2 )(length list ))))
|  |  |  |  |  |  |  |  |  Calling function sort
|  |  |  |  |  |  |  |  |  Found Value of sort_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['if', ['eq', 'list1', 'nil'], 'list0', ['if', ['<', ['first', 'list0'], ['first', 'list1']], ['cons', ['first', 'list0'], ['sort', ['rest', 'list0'], 'list1']], ['cons', ['first', 'list1'], ['sort', ['rest', 'list1'], 'list0']]]]])
|  |  |  |  |  |  |  |  |  |  Eval (mergeSort (mselect list 0 (/ (length list )2 )))
|  |  |  |  |  |  |  |  |  |  |  Calling function mergeSort
|  |  |  |  |  |  |  |  |  |  |  Found Value of mergeSort_defun as (['list'], ['if', ['eq', ['length', 'list'], 1], 'list', ['sort', ['mergeSort', ['mselect', 'list', 0, ['/', ['length', 'list'], 2]]], ['mergeSort', ['mselect', 'list', ['/', ['length', 'list'], 2], ['length', 'list']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  Eval (mselect list 0 (/ (length list )2 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  Calling function mselect
|  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of mselect_defun as (['list', 'start', 'end'], ['flatten', ['cons', ['slice', ['get', 'list', 'start'], ['-', 'end', ['+', 'start', 1]]], 'nil']])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: start = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (/ (length list )2 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 2 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: end = 2
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (cons (slice (get list start )(- end (+ start 1 )))nil ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (slice (get list start )(- end (+ start 1 )))nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (slice (get list start )(- end (+ start 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function slice
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of slice_defun as (['list', 'idx'], ['if', ['atom', 'list'], 'list', ['if', ['eq', 0, 'idx'], ['first', 'list'], ['cons', ['first', 'list'], ['cons', ['slice', ['rest', 'list'], ['-', 'idx', 1]], 'nil']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (get list start )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function get
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of get_defun as (['list', 'idx'], ['if', ['eq', 'list', 'nil'], 'nil', ['if', ['eq', 0, 'idx'], 'list', ['get', ['rest', 'list'], ['-', 'idx', 1]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval start 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of start as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )nil (if (eq 0 idx )list (get (rest list )(- idx 1 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )list (get (rest list )(- idx 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- end (+ start 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval end 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of end as 2
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ start 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval start 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of start as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom list )list (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (slice (rest list )(- idx 1 ))nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (slice (rest list )(- idx 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function slice
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of slice_defun as (['list', 'idx'], ['if', ['atom', 'list'], 'list', ['if', ['eq', 0, 'idx'], ['first', 'list'], ['cons', ['first', 'list'], ['cons', ['slice', ['rest', 'list'], ['-', 'idx', 1]], 'nil']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- idx 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom list )list (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((1 5 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [[1, 5]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[1, 5]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((1 5 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[1, 5]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((1 5 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (append (flatten (first expr ))(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function append
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of append_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['cons', ['first', 'list0'], ['append', ['rest', 'list0'], 'list1']]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[1, 5]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((1 5 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first expr )(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first expr )(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[1, 5]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((1 5 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (cons (first list0 )(append (rest list0 )list1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list0 )(append (rest list0 )list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (append (rest list0 )list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function append
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of append_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['cons', ['first', 'list0'], ['append', ['rest', 'list0'], 'list1']]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (cons (first list0 )(append (rest list0 )list1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list0 )(append (rest list0 )list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (append (rest list0 )list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function append
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of append_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['cons', ['first', 'list0'], ['append', ['rest', 'list0'], 'list1']]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (cons (first list0 )(append (rest list0 )list1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq (length list )1 )list (sort (mergeSort (mselect list 0 (/ (length list )2 )))(mergeSort (mselect list (/ (length list )2 )(length list )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq (length list )1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (sort (mergeSort (mselect list 0 (/ (length list )2 )))(mergeSort (mselect list (/ (length list )2 )(length list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function sort
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of sort_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['if', ['eq', 'list1', 'nil'], 'list0', ['if', ['<', ['first', 'list0'], ['first', 'list1']], ['cons', ['first', 'list0'], ['sort', ['rest', 'list0'], 'list1']], ['cons', ['first', 'list1'], ['sort', ['rest', 'list1'], 'list0']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (mergeSort (mselect list 0 (/ (length list )2 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function mergeSort
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of mergeSort_defun as (['list'], ['if', ['eq', ['length', 'list'], 1], 'list', ['sort', ['mergeSort', ['mselect', 'list', 0, ['/', ['length', 'list'], 2]]], ['mergeSort', ['mselect', 'list', ['/', ['length', 'list'], 2], ['length', 'list']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (mselect list 0 (/ (length list )2 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function mselect
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of mselect_defun as (['list', 'start', 'end'], ['flatten', ['cons', ['slice', ['get', 'list', 'start'], ['-', 'end', ['+', 'start', 1]]], 'nil']])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: start = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (/ (length list )2 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 2 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: end = 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (cons (slice (get list start )(- end (+ start 1 )))nil ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (slice (get list start )(- end (+ start 1 )))nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (slice (get list start )(- end (+ start 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function slice
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of slice_defun as (['list', 'idx'], ['if', ['atom', 'list'], 'list', ['if', ['eq', 0, 'idx'], ['first', 'list'], ['cons', ['first', 'list'], ['cons', ['slice', ['rest', 'list'], ['-', 'idx', 1]], 'nil']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (get list start )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function get
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of get_defun as (['list', 'idx'], ['if', ['eq', 'list', 'nil'], 'nil', ['if', ['eq', 0, 'idx'], 'list', ['get', ['rest', 'list'], ['-', 'idx', 1]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval start 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of start as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )nil (if (eq 0 idx )list (get (rest list )(- idx 1 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )list (get (rest list )(- idx 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- end (+ start 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval end 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of end as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ start 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval start 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of start as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom list )list (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first expr )(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq (length list )1 )list (sort (mergeSort (mselect list 0 (/ (length list )2 )))(mergeSort (mselect list (/ (length list )2 )(length list )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq (length list )1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (mergeSort (mselect list (/ (length list )2 )(length list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function mergeSort
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of mergeSort_defun as (['list'], ['if', ['eq', ['length', 'list'], 1], 'list', ['sort', ['mergeSort', ['mselect', 'list', 0, ['/', ['length', 'list'], 2]]], ['mergeSort', ['mselect', 'list', ['/', ['length', 'list'], 2], ['length', 'list']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (mselect list (/ (length list )2 )(length list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function mselect
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of mselect_defun as (['list', 'start', 'end'], ['flatten', ['cons', ['slice', ['get', 'list', 'start'], ['-', 'end', ['+', 'start', 1]]], 'nil']])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (/ (length list )2 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 2 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: start = 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: end = 2
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (cons (slice (get list start )(- end (+ start 1 )))nil ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (slice (get list start )(- end (+ start 1 )))nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (slice (get list start )(- end (+ start 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function slice
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of slice_defun as (['list', 'idx'], ['if', ['atom', 'list'], 'list', ['if', ['eq', 0, 'idx'], ['first', 'list'], ['cons', ['first', 'list'], ['cons', ['slice', ['rest', 'list'], ['-', 'idx', 1]], 'nil']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (get list start )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function get
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of get_defun as (['list', 'idx'], ['if', ['eq', 'list', 'nil'], 'nil', ['if', ['eq', 0, 'idx'], 'list', ['get', ['rest', 'list'], ['-', 'idx', 1]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval start 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of start as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )nil (if (eq 0 idx )list (get (rest list )(- idx 1 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )list (get (rest list )(- idx 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (get (rest list )(- idx 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function get
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of get_defun as (['list', 'idx'], ['if', ['eq', 'list', 'nil'], 'nil', ['if', ['eq', 0, 'idx'], 'list', ['get', ['rest', 'list'], ['-', 'idx', 1]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- idx 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )nil (if (eq 0 idx )list (get (rest list )(- idx 1 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )list (get (rest list )(- idx 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- end (+ start 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval end 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of end as 2
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ start 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval start 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of start as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom list )list (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first expr )(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq (length list )1 )list (sort (mergeSort (mselect list 0 (/ (length list )2 )))(mergeSort (mselect list (/ (length list )2 )(length list )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq (length list )1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list1 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (< (first list0 )(first list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list0 )(sort (rest list0 )list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (sort (rest list0 )list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function sort
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of sort_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['if', ['eq', 'list1', 'nil'], 'list0', ['if', ['<', ['first', 'list0'], ['first', 'list1']], ['cons', ['first', 'list0'], ['sort', ['rest', 'list0'], 'list1']], ['cons', ['first', 'list1'], ['sort', ['rest', 'list1'], 'list0']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [1]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [1, 5]
|  |  |  |  |  |  |  |  |  |  Eval (mergeSort (mselect list (/ (length list )2 )(length list )))
|  |  |  |  |  |  |  |  |  |  |  Calling function mergeSort
|  |  |  |  |  |  |  |  |  |  |  Found Value of mergeSort_defun as (['list'], ['if', ['eq', ['length', 'list'], 1], 'list', ['sort', ['mergeSort', ['mselect', 'list', 0, ['/', ['length', 'list'], 2]]], ['mergeSort', ['mselect', 'list', ['/', ['length', 'list'], 2], ['length', 'list']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  Eval (mselect list (/ (length list )2 )(length list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  Calling function mselect
|  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of mselect_defun as (['list', 'start', 'end'], ['flatten', ['cons', ['slice', ['get', 'list', 'start'], ['-', 'end', ['+', 'start', 1]]], 'nil']])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (/ (length list )2 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 2 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: start = 2
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: end = 4
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (cons (slice (get list start )(- end (+ start 1 )))nil ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (slice (get list start )(- end (+ start 1 )))nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (slice (get list start )(- end (+ start 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function slice
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of slice_defun as (['list', 'idx'], ['if', ['atom', 'list'], 'list', ['if', ['eq', 0, 'idx'], ['first', 'list'], ['cons', ['first', 'list'], ['cons', ['slice', ['rest', 'list'], ['-', 'idx', 1]], 'nil']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (get list start )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function get
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of get_defun as (['list', 'idx'], ['if', ['eq', 'list', 'nil'], 'nil', ['if', ['eq', 0, 'idx'], 'list', ['get', ['rest', 'list'], ['-', 'idx', 1]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval start 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of start as 2
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 2
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )nil (if (eq 0 idx )list (get (rest list )(- idx 1 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )list (get (rest list )(- idx 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 2
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (get (rest list )(- idx 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function get
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of get_defun as (['list', 'idx'], ['if', ['eq', 'list', 'nil'], 'nil', ['if', ['eq', 0, 'idx'], 'list', ['get', ['rest', 'list'], ['-', 'idx', 1]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- idx 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 2
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )nil (if (eq 0 idx )list (get (rest list )(- idx 1 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )list (get (rest list )(- idx 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (get (rest list )(- idx 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function get
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of get_defun as (['list', 'idx'], ['if', ['eq', 'list', 'nil'], 'nil', ['if', ['eq', 0, 'idx'], 'list', ['get', ['rest', 'list'], ['-', 'idx', 1]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- idx 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )nil (if (eq 0 idx )list (get (rest list )(- idx 1 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )list (get (rest list )(- idx 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- end (+ start 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval end 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of end as 4
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  4  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ start 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval start 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of start as 2
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom list )list (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  7  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (slice (rest list )(- idx 1 ))nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (slice (rest list )(- idx 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function slice
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of slice_defun as (['list', 'idx'], ['if', ['atom', 'list'], 'list', ['if', ['eq', 0, 'idx'], ['first', 'list'], ['cons', ['first', 'list'], ['cons', ['slice', ['rest', 'list'], ['-', 'idx', 1]], 'nil']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- idx 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom list )list (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  10  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  10  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  10  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  10  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((7 10 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [[7, 10]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[7, 10]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((7 10 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[7, 10]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((7 10 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (append (flatten (first expr ))(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function append
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of append_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['cons', ['first', 'list0'], ['append', ['rest', 'list0'], 'list1']]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[7, 10]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((7 10 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  7  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first expr )(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  7  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  10  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first expr )(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  10  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [[7, 10]]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  ((7 10 )) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (cons (first list0 )(append (rest list0 )list1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list0 )(append (rest list0 )list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  7  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (append (rest list0 )list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function append
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of append_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['cons', ['first', 'list0'], ['append', ['rest', 'list0'], 'list1']]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (cons (first list0 )(append (rest list0 )list1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list0 )(append (rest list0 )list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  10  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (append (rest list0 )list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function append
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of append_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['cons', ['first', 'list0'], ['append', ['rest', 'list0'], 'list1']]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (cons (first list0 )(append (rest list0 )list1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq (length list )1 )list (sort (mergeSort (mselect list 0 (/ (length list )2 )))(mergeSort (mselect list (/ (length list )2 )(length list )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq (length list )1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (sort (mergeSort (mselect list 0 (/ (length list )2 )))(mergeSort (mselect list (/ (length list )2 )(length list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function sort
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of sort_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['if', ['eq', 'list1', 'nil'], 'list0', ['if', ['<', ['first', 'list0'], ['first', 'list1']], ['cons', ['first', 'list0'], ['sort', ['rest', 'list0'], 'list1']], ['cons', ['first', 'list1'], ['sort', ['rest', 'list1'], 'list0']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (mergeSort (mselect list 0 (/ (length list )2 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function mergeSort
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of mergeSort_defun as (['list'], ['if', ['eq', ['length', 'list'], 1], 'list', ['sort', ['mergeSort', ['mselect', 'list', 0, ['/', ['length', 'list'], 2]]], ['mergeSort', ['mselect', 'list', ['/', ['length', 'list'], 2], ['length', 'list']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (mselect list 0 (/ (length list )2 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function mselect
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of mselect_defun as (['list', 'start', 'end'], ['flatten', ['cons', ['slice', ['get', 'list', 'start'], ['-', 'end', ['+', 'start', 1]]], 'nil']])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: start = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (/ (length list )2 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 2 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: end = 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (cons (slice (get list start )(- end (+ start 1 )))nil ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (slice (get list start )(- end (+ start 1 )))nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (slice (get list start )(- end (+ start 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function slice
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of slice_defun as (['list', 'idx'], ['if', ['atom', 'list'], 'list', ['if', ['eq', 0, 'idx'], ['first', 'list'], ['cons', ['first', 'list'], ['cons', ['slice', ['rest', 'list'], ['-', 'idx', 1]], 'nil']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (get list start )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function get
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of get_defun as (['list', 'idx'], ['if', ['eq', 'list', 'nil'], 'nil', ['if', ['eq', 0, 'idx'], 'list', ['get', ['rest', 'list'], ['-', 'idx', 1]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval start 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of start as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )nil (if (eq 0 idx )list (get (rest list )(- idx 1 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )list (get (rest list )(- idx 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- end (+ start 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval end 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of end as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ start 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval start 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of start as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom list )list (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  7  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  7  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  7  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  7  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [7]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [7]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [7]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  7  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first expr )(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [7]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  7  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [7]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [7]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq (length list )1 )list (sort (mergeSort (mselect list 0 (/ (length list )2 )))(mergeSort (mselect list (/ (length list )2 )(length list )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq (length list )1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [7]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [7]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (mergeSort (mselect list (/ (length list )2 )(length list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function mergeSort
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of mergeSort_defun as (['list'], ['if', ['eq', ['length', 'list'], 1], 'list', ['sort', ['mergeSort', ['mselect', 'list', 0, ['/', ['length', 'list'], 2]]], ['mergeSort', ['mselect', 'list', ['/', ['length', 'list'], 2], ['length', 'list']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (mselect list (/ (length list )2 )(length list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function mselect
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of mselect_defun as (['list', 'start', 'end'], ['flatten', ['cons', ['slice', ['get', 'list', 'start'], ['-', 'end', ['+', 'start', 1]]], 'nil']])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (/ (length list )2 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 2 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: start = 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: end = 2
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (cons (slice (get list start )(- end (+ start 1 )))nil ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (slice (get list start )(- end (+ start 1 )))nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (slice (get list start )(- end (+ start 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function slice
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of slice_defun as (['list', 'idx'], ['if', ['atom', 'list'], 'list', ['if', ['eq', 0, 'idx'], ['first', 'list'], ['cons', ['first', 'list'], ['cons', ['slice', ['rest', 'list'], ['-', 'idx', 1]], 'nil']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (get list start )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function get
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of get_defun as (['list', 'idx'], ['if', ['eq', 'list', 'nil'], 'nil', ['if', ['eq', 0, 'idx'], 'list', ['get', ['rest', 'list'], ['-', 'idx', 1]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval start 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of start as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )nil (if (eq 0 idx )list (get (rest list )(- idx 1 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )list (get (rest list )(- idx 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (get (rest list )(- idx 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function get
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of get_defun as (['list', 'idx'], ['if', ['eq', 'list', 'nil'], 'nil', ['if', ['eq', 0, 'idx'], 'list', ['get', ['rest', 'list'], ['-', 'idx', 1]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- idx 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )nil (if (eq 0 idx )list (get (rest list )(- idx 1 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )list (get (rest list )(- idx 1 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (- end (+ start 1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval end 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of end as 2
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ start 1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval start 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of start as 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: idx = 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom list )list (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq 0 idx )(first list )(cons (first list )(cons (slice (rest list )(- idx 1 ))nil )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq 0 idx )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval idx 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of idx as 0
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  10  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  10  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  10  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  10  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom (first expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  10  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first expr )(flatten (rest expr )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  10  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (flatten (rest expr ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function flatten
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of flatten_defun as (['expr'], ['if', ['atom', 'expr'], 'expr', ['if', ['atom', ['first', 'expr']], ['cons', ['first', 'expr'], ['flatten', ['rest', 'expr']]], ['append', ['flatten', ['first', 'expr']], ['flatten', ['rest', 'expr']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: expr = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (atom expr )expr (if (atom (first expr ))(cons (first expr )(flatten (rest expr )))(append (flatten (first expr ))(flatten (rest expr )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (atom expr )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval expr 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of expr as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq (length list )1 )list (sort (mergeSort (mselect list 0 (/ (length list )2 )))(mergeSort (mselect list (/ (length list )2 )(length list )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq (length list )1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (+ 1 (length (rest list )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (length (rest list ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function length
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of length_defun as (['list'], ['if', ['eq', 'list', 'nil'], 0, ['+', 1, ['length', ['rest', 'list']]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list nil )0 (+ 1 (length (rest list ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  0  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval 1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [7]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list1 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (< (first list0 )(first list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [7]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  7  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  10  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list0 )(sort (rest list0 )list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [7]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  7  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (sort (rest list0 )list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function sort
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of sort_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['if', ['eq', 'list1', 'nil'], 'list0', ['if', ['<', ['first', 'list0'], ['first', 'list1']], ['cons', ['first', 'list0'], ['sort', ['rest', 'list0'], 'list1']], ['cons', ['first', 'list1'], ['sort', ['rest', 'list1'], 'list0']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [7]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = [7, 10]
|  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))))
|  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 ))))
|  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list1 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  Eval (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (< (first list0 )(first list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  7  
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list0 )(sort (rest list0 )list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (sort (rest list0 )list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function sort
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of sort_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['if', ['eq', 'list1', 'nil'], 'list0', ['if', ['<', ['first', 'list0'], ['first', 'list1']], ['cons', ['first', 'list0'], ['sort', ['rest', 'list0'], 'list1']], ['cons', ['first', 'list1'], ['sort', ['rest', 'list1'], 'list0']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [1, 5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list1 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (< (first list0 )(first list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  7  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list0 )(sort (rest list0 )list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (sort (rest list0 )list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function sort
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of sort_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['if', ['eq', 'list1', 'nil'], 'list0', ['if', ['<', ['first', 'list0'], ['first', 'list1']], ['cons', ['first', 'list0'], ['sort', ['rest', 'list0'], 'list1']], ['cons', ['first', 'list1'], ['sort', ['rest', 'list1'], 'list0']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [5]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  Create parameter->value binding: list1 = [1, 5, 7, 10]
|  |  |  |  |  Eval (if (eq list0 nil )list1 (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))))
|  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  Found Value of list0 as [2, 3, 6]
|  |  |  |  |  |  |  Ans  (2 3 6 ) 
|  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  Eval (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 ))))
|  |  |  |  |  |  |  Eval (eq list1 nil )
|  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  Found Value of list1 as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  Eval (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))
|  |  |  |  |  |  |  |  Eval (< (first list0 )(first list1 ))
|  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  Found Value of list0 as [2, 3, 6]
|  |  |  |  |  |  |  |  |  |  Ans  (2 3 6 ) 
|  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  Eval (first list1 )
|  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  Found Value of list1 as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  Eval (cons (first list1 )(sort (rest list1 )list0 ))
|  |  |  |  |  |  |  |  |  Eval (first list1 )
|  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  Found Value of list1 as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  Ans  1  
|  |  |  |  |  |  |  |  |  Eval (sort (rest list1 )list0 )
|  |  |  |  |  |  |  |  |  |  Calling function sort
|  |  |  |  |  |  |  |  |  |  Found Value of sort_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['if', ['eq', 'list1', 'nil'], 'list0', ['if', ['<', ['first', 'list0'], ['first', 'list1']], ['cons', ['first', 'list0'], ['sort', ['rest', 'list0'], 'list1']], ['cons', ['first', 'list1'], ['sort', ['rest', 'list1'], 'list0']]]]])
|  |  |  |  |  |  |  |  |  |  |  Eval (rest list1 )
|  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [1, 5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (1 5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [2, 3, 6]
|  |  |  |  |  |  |  |  |  |  |  Ans  (2 3 6 ) 
|  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = [2, 3, 6]
|  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))))
|  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list1 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [2, 3, 6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 3 6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (< (first list0 )(first list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [2, 3, 6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 3 6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list1 )(sort (rest list1 )list0 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [2, 3, 6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 3 6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  2  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (sort (rest list1 )list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function sort
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of sort_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['if', ['eq', 'list1', 'nil'], 'list0', ['if', ['<', ['first', 'list0'], ['first', 'list1']], ['cons', ['first', 'list0'], ['sort', ['rest', 'list0'], 'list1']], ['cons', ['first', 'list1'], ['sort', ['rest', 'list1'], 'list0']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [2, 3, 6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 3 6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [3, 6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [3, 6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list1 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (< (first list0 )(first list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [3, 6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list0 )(sort (rest list0 )list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [3, 6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  3  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (sort (rest list0 )list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function sort
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of sort_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['if', ['eq', 'list1', 'nil'], 'list0', ['if', ['<', ['first', 'list0'], ['first', 'list1']], ['cons', ['first', 'list0'], ['sort', ['rest', 'list0'], 'list1']], ['cons', ['first', 'list1'], ['sort', ['rest', 'list1'], 'list0']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [3, 6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list1 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (< (first list0 )(first list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  6  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list1 )(sort (rest list1 )list0 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  5  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (sort (rest list1 )list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function sort
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of sort_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['if', ['eq', 'list1', 'nil'], 'list0', ['if', ['<', ['first', 'list0'], ['first', 'list1']], ['cons', ['first', 'list0'], ['sort', ['rest', 'list0'], 'list1']], ['cons', ['first', 'list1'], ['sort', ['rest', 'list1'], 'list0']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [5, 7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = [6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 ))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list1 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (< (first list0 )(first list1 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  7  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  6  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  False  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (cons (first list1 )(sort (rest list1 )list0 ))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (first list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  6  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (sort (rest list1 )list0 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Calling function sort
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of sort_defun as (['list0', 'list1'], ['if', ['eq', 'list0', 'nil'], 'list1', ['if', ['eq', 'list1', 'nil'], 'list0', ['if', ['<', ['first', 'list0'], ['first', 'list1']], ['cons', ['first', 'list0'], ['sort', ['rest', 'list0'], 'list1']], ['cons', ['first', 'list1'], ['sort', ['rest', 'list1'], 'list0']]]]])
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (rest list1 )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [6]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list0 = []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Create parameter->value binding: list1 = [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (if (eq list0 nil )list1 (if (eq list1 nil )list0 (if (< (first list0 )(first list1 ))(cons (first list0 )(sort (rest list0 )list1 ))(cons (first list1 )(sort (rest list1 )list0 )))))
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval (eq list0 nil )
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list0 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list0 as []
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval nil 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  []  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  True  
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Eval list1 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Found Value of list1 as [7, 10]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (6 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 6 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 6 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 6 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 6 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (5 6 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 5 6 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 5 6 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 5 6 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 5 6 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (3 5 6 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 3 5 6 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 3 5 6 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  |  Ans  (2 3 5 6 7 10 ) 
|  |  |  |  |  |  |  |  |  |  |  Ans  (2 3 5 6 7 10 ) 
|  |  |  |  |  |  |  |  |  Ans  (2 3 5 6 7 10 ) 
|  |  |  |  |  |  |  |  Ans  (1 2 3 5 6 7 10 ) 
|  |  |  |  |  |  |  Ans  (1 2 3 5 6 7 10 ) 
|  |  |  |  |  |  Ans  (1 2 3 5 6 7 10 ) 
|  |  |  |  |  Ans  (1 2 3 5 6 7 10 ) 
|  |  |  Ans  (1 2 3 5 6 7 10 ) 
|  |  Ans  (1 2 3 5 6 7 10 ) 
Ans  (1 2 3 5 6 7 10 ) 
